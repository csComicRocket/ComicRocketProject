Comic Rocket Capstone Project, Fall 2012-Winter 2013
pageTree and pageNode API

Required files: pageTree.py, pageNode.py, and utilities.py

Variables of pageNode (element from a comic site, like a comic page or a jpeg or css file.)

url
elementId
sourceMode
content
encodeType
mimeType
authorTimeStamp
pullTimeStamp []
revisionNum
revisionHistory
isReferredTo
__nodeId
__bPointer
__fPointer

The meaning of each variable. Variables have been grouped together in these explanations. For example, authorTimeStamp and pullTimeStamp are defined in the same paragraph. Not sure why. Some explanations use comparison and contrast between similar variables.

The url uniquely identifies a file from the web, but does not determine the version of the url. However, where only the url is specified, it is interpreted as the most recent version of that file. The elementId uniquely identifies the (url, revision) element. If the file has been pulled from the web the elementId will be unknown. elementId will uniquely identify one revision from one file stored in the Cache.

The sourceMode indicates whether the element has been pulled from the Cache or the web, and will determine how the data is interpreted.

The content is the actual data from the file, for example the HTML code, or the JPEG contents. It is a required field. The encodeType specifies how to read the content of the file and is also required. The mimeType may or may not be provided by the author of the element, and is not required.

The authorTimeStamp is the timestamp given by the author of an element. As not all authors specify revision times of elements, the authorTimeStamp is not required. The pullTimeStamp is a list of timestamps referring to various pulls. A pull from the web will have only one timestamp in the list - the current time when pulled from the web. A pullTimeStamp list from the Cache will store all pullTimeStamps, beginning with the first pull time of that revision and ending in the most recent pull. A new revision of an element will begin with a fresh pullTimeStamp list including only the first time of the pull of the new version of the file.

The revisionNum will indicate what version of the file the pageNode represents. On the most recent version of an element, the revisionNum will indicate whether and how many revisions the Cache is storing. The first version of an element will have revisionNum = 0. revisionHistory type and meaning has yet to be decided, though it is likely to be a list of pageNodes or elementIds.

The variable isReferredTo will count the number of files referring to that element, not the number of times any file refers to that element. It will be used to indicate whether an element is a utility element, such as JPEGs for menu bars, or a CSS stylesheet etc. If a file, such as a JPEG, is referred to only once, it may be a unique piece to the page that refers to it. If such a file is referred to more than once, 200 times for example, it will be evident that it is a utility file used in many pages on a comic site. isReferredTo will not be cleaned or used for garbage collection purposes, but simply will be used as an indicator of whether it is a utility file or specific to a page.

The variables __nodeId, __bPointer, and __fPointer are for pageTree structure. nodeId identifies a node relative to its tree. The root of the tree should have nodeId = 0. The only other constraint on nodeId.s is that no two nodes in a single tree share the same nodeId. The value of nodeId does not indicate in what position the pageNode is within its pageTree. (A node with nodeId = 53 could be on the second level, a leafl, the left, the right, the middle somewhere... anywhere but the root.) bPointer refers to a node.s parent. fPointer refers to a node.s children. These will not be unique outside the structure of the pageTree instance to which they belong. 

Usage of pageTree

To create and populate a pageTree, follow this example:

pageTree = PageTree()
pageTree.createPageNode("http://www.xkcd.com", 0)  # root node
pageTree.createPageNode("http://www.xkcd.com/apic.jpg", 1, parent = 0)
pageTree.createPageNode("http://www.xkcd.com/style.css", 2, parent = 1)

There does not need to be any rhyme or reason to the nodeId.s (the numbers 0..2 in the example above) other than the root nodeId = 0. The following creates the same tree:

pageTree = PageTree()
pageTree.createPageNode("http://www.xkcd.com", 0)  # root node
pageTree.createPageNode("http://www.xkcd.com/apic.jpg", 53, parent = 0)
pageTree.createPageNode("http://www.xkcd.com/style.css", 4, parent = 53)

Nodes do not need to be added in specific order, as long as the parent already exists.

pageTree = PageTree()
pageTree.createPageNode("http://www.xkcd.com", 0)  # root node
pageTree.createPageNode("http://www.xkcd.com/apic.jpg", 53, parent = 0)
pageTree.createPageNode("http://www.xkcd.com/style.css", 4, parent = 53)
pageTree.createPageNode("http://www.xkcd.com/apic2.jpg", 437, parent = 53)
pageTree.createPageNode("http://www.xkcd.com/ascript.js", 72, parent = 4)
pageTree.createPageNode("http://www.xkcd.com/apic3.jpg", 38, parent = 0)

Adding content to nodes:
pageTree.setContent(0, contentForRoot, encodeTypeForRoot)
pageTree.setContent(72, contentForNode72, encodeTypeForNode72)
pageTree.setAuthorTimeStamp(0, authorTimeStamp)
etc.

pageTree methods:

PageTree()
PageTree(url) # creates root node for you
createPageNode(url, 0) # root node
createPageNode(url, nodeId != 0, parentId)
createPageNode(url, nodeId, parentId, sourceMode, content, encodeType, pullTS[])
createPageNode(url, nodeId, parentId, sourceMode, content, encodeType, pullTS)
setUrl(nodeId, url) replaces url added from original tree creation
getUrl(nodeId) returns url for given nodeId
setElementId(nodeId, elementId)
getElementId(nodeId)
setSourceMode(nodeId, sourceMode)
getSourceMode(nodeId)
setContent(nodeId, content, encodeType)
getContent(nodeId) returns content
getEncodeType(nodeId)
setMimeType(nodeId, mimeType)
getMimeType(nodeId)
setAuthorTS(nodeId, authorTimeStamp)
getAuthorTS(nodeId) returns a timestamp
setPullTS(nodeId, pullTimeStamps) adds timestamp to end of list
setPullTS(nodeId, pullTimeStamps[]) adds timestamps to end of list
getPullTS(nodeId) returns a list of timestamps, even if the list has only one element
setRevisionNum(nodeId, revisionNum)
getRevisionNum(nodeId)
isReferredTo() increases number of documents referring to nodeId by 1. This should be effectively once per tree, even if files within the tree point to it more than once. Original creation of tree sets isReferredTo = 1. We really only care about other trees referring to the same element.

